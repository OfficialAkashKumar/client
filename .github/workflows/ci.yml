name: CI

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 18.x]
    name: node ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: 'npm'
      - run: npm ci
      - run: npm run prepublishOnly
      - uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: |
            lib/
            umd/

  prod-deps:
    strategy:
      matrix:
        os-version: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v3
      - id: prod-deps
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - if: steps.prod-deps.outputs.cache-hit != 'true'
        run: npm install --omit=dev --ignore-scripts

  edge-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: runtimes/edge/package-lock.json
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@v3
        with:
          name: build-output
      - run: |
          npm ci
          npm test
        working-directory: runtimes/edge

  deno-runtime:
    runs-on: ubuntu-latest
    needs: [build, prod-deps]
    strategy:
      matrix:
        deno-version: [1.x, canary]
    name: deno ${{ matrix.deno-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: prod-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}
      - if: matrix.deno-version == '1.x'
        run: |
          deno fmt --check
          deno lint
          deno check *.ts
        working-directory: runtimes/deno
      - run: deno test --allow-net
        working-directory: runtimes/deno
